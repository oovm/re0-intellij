try MONAD? {

}



try {

}

try Option<T> {

}

trait Biased {
    def biased(self): bool;
}

extend<T> Option<T>: Biased {
    def biased(self) = @matches(self, Some(_))
}

extend<T> Result<T>: Biased {
    def biased(self) = @matches(self, Success(_))
}

match a {
    [ ]:
        fallthrough

}

|a| {}